<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:task="http://www.springframework.org/schema/task" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   		http://www.springframework.org/schema/task
			http://www.springframework.org/schema/task/spring-task-3.0.xsd">
	
    <!--	References:
    Task Scheduling Simplifications in Spring 3.0
    - http://blog.springsource.com/2010/01/05/task-scheduling-simplifications-in-spring-3-0/  
    Spring Framework 3 Reference;
    - http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/scheduling.html-->

    <!-- Make sure to add the <context:component-scan base-package="" /> first -->
	
    <!-- Activates @Scheduled and @Async annotations for scheduling -->
    <task:annotation-driven executor="executorWithPoolSizeRange" scheduler="taskScheduler"/>
	
    <!-- 
    The 'executor' element:
    When a task is submitted, the executor will first 
    try to use a free thread if the number of active threads is currently less than 
    the core size. If the core size has been reached, then the task will be added 
    to the queue as long as its capacity has not yet been reached. Only then, 
    if the queue's capacity has been reached, will the executor create a new 
    thread beyond the core size. If the max size has also been reached, then 
    the executor will reject the task 
    See: 25.4.2 The 'executor' element -->
    <!-- Defines a ThreadPoolTaskExecutor instance with configurable pool size, queue-capacity, keep-alive, 
    and rejection-policy values. The id becomes the default thread name prefix -->	
    <task:executor id="executorWithPoolSizeRange"
                   pool-size="5-25"
                   queue-capacity="100"/>
	 
    <!-- Defines a ThreadPoolTaskScheduler instance with configurable pool size.
    The id becomes the default thread name prefix. -->              
    <task:scheduler id="taskScheduler" pool-size="1"/>
         
    <!-- ======================================= 1. send email reminder ================================================= -->
    <bean id="nis020SchedulerReminder" class="id.co.ahm.sd.nis.app020.task.Nis020SchedulerReminder"></bean>
    <!--Spring Quartz -->
    <bean name="nis020SchedulerReminderEmailJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"> 
        <property name="jobClass" value="id.co.ahm.sd.nis.app020.job.Nis020SchedulerReminderEmailJob" /> 
        <property name="jobDataAsMap">
            <map>    
                <entry key="nis020SchedulerReminder" value-ref="nis020SchedulerReminder" />
            </map>            
        </property> 
        <property name="durability" value="true" />
    </bean>       
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="nis020SchedulerReminderEmailJob" />
        <property name="cronExpression" value="0 */15 * ? * *" />
        <!--<property name="cronExpression" value="0/10 * * ? * *" />-->
    </bean>
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobDetails">
            <list>
                <ref bean="nis020SchedulerReminderEmailJob" />
            </list>
        </property>
        <property name="triggers">
            <list>
                <ref bean="cronTrigger" />
            </list>
        </property>
    </bean>    
</beans>